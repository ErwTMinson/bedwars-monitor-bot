from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram.types import Message
from PIL import Image


from modules.func_tools import if_line_mode_is_not_rgba_than_convert_to_rgba
from modules.icons import icons_titles, Fight, Bow_Fight, Angry, No_Provisions, Point_Captured, \
    Fireball_Damage, Alarm
import modules.points
from modules.map import Map


# our_command = "—ã—ã"
# icons = {
#     "–¢—Ä–µ–≤–æ–≥–∞": "alarm.png",
#     "–ë–æ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ª—É–∫–æ–≤": "bow_fight.png",
#     "–ü—ë—Ä–ª–æ–≤–∞—è —Ç—Ä–µ–≤–æ–≥–∞": "ender_pearl_alarm.png",
#     "–ò–¥—ë—Ç –±–æ–π": "fight.png",
#     "–ù–∞–Ω–µ—Å–µ–Ω —Ñ–∞–µ—Ä–±–æ–ª—å–Ω—ã–π —É–¥–∞—Ä": "fireball_damage.png",
#     "–°–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤ –∫ —Ç–æ—á–∫–µ": "go_to_point.png",
#     "–¢–æ—á–∫–∞ –∑–∞—Ö–≤–∞—á–µ–Ω–∞": "point_captured.png",
#     "–ö–æ–º–∞–Ω–¥–∞ –æ—Ç—Ä–µ–∑–∞–Ω–∞ –æ—Ç —Å–Ω–∞–±–∂–µ–Ω–∏—è": "shears.png",
#     "–ö–æ–º–∞–Ω–¥–∞ –∑–∞–∫–ª—é—á–∏–ª–∞ –º–∏—Ä": "freedom.png",
#     "–ö–æ–º–∞–Ω–¥–∞ –Ω–∞–∫–∞–ª—è–µ—Ç –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É": "angry.png",
#     "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": "info.png",
#     "–¢–∏–º –æ—Å—Ç–∞–ª—Å—è –Ω–∞ –≤—Ä–∞–∂–µ—Å–∫–æ–π —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏": "captive.png",
#     "–ü—Ä–∏–∫–∞–∑ –∑–∞—â–∏—â–∞—Ç—å —Ç–æ—á–∫—É": "defense_point.png",
#     "–ü—Ä–æ—Ä—ã–≤": "breakthrough.png",
# }

# points_on_map = {
#     "–¢–æ—á–∫–∞ –û1": {"island_name": "blue_base_o", "news": [{"news": "fight", "made": "yellow"}]},
#     "–¢–æ—á–∫–∞ –ö": {"island_name": "red_base", "news": []},
#     "–¢–æ—á–∫–∞ –û2": {"island_name": "blue_base_o", "news": []},
#     "–¢–æ—á–∫–∞ –ñ": {"island_name": "yellow_base", "news": []},
#     "–¢–æ—á–∫–∞ –¶": {"island_name": "red_center", "news": []},
#     "–¢–æ—á–∫–∞ –°": {"island_name": "blue_base", "news": []},
#     "–¢–æ—á–∫–∞ –û3": {"island_name": "blue_base_o", "news": []},
#     "–¢–æ—á–∫–∞ –ó": {"island_name": "green_base", "news": []},
#     "–¢–æ—á–∫–∞ –û4": {"island_name": "blue_base_o", "news": []},
# }

# def add(point):
# 	if len(points_on_map[point]) >= 3:
# 		del points_on_map[point][0]
# 	points_on_map[point] =




# for (key, value) in icons.items():
#     # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
#     background = Image.open("textures/points/green_point.png")
#     overlay = Image.open(f"textures/icons/{value}")

#     # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ü–µ–Ω—Ç—Ä—É
#     x = (background.width - overlay.width) // 2
#     y = (background.height - overlay.height) // 2

#     # –ù–∞–Ω–æ—Å–∏–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –∑–∞–¥–Ω–µ–º –ø–ª–∞–Ω–µ
#     print(background.filename)
#     if our_command in background.filename:
#         circle = Image.open("textures/points/circle.png")
#         background.paste(circle, (0, 0), circle)
#     background.paste(overlay, (x, y), overlay)

#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
#     background.save(f"icons/{value}.png")

bot = Bot(token='5946938437:AAFTnAFxCMxbOjZ7PNZcLRs6WKpflYiDGnQ')
dp = Dispatcher(bot)


events_keyboard = []
print(icons_titles)
for (key, value) in icons_titles.items():
    print(value["title"])
    events_keyboard.append(KeyboardButton(value["title"]))


class ChooseAction(StatesGroup):
    action = State()
    point = State()
    event = State()


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message, state: FSMContext):
    m = Map("temple")

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    self_event = KeyboardButton('–°–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ')
    event_of_other_team = KeyboardButton('–ß—É–∂–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ')

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True).row(self_event, event_of_other_team)

    a = m.map["2"]["center"]
    a.owner = "yellow"
    a.append_icon(Point_Captured("green", "green"))
    a.append_icon(Point_Captured("yellow", "green"))
    a.append_icon(Bow_Fight("yellow", "green"))

    a = m.map["1"]["base_red"]
    a.append_icon(Fight("red", "green"))
    a.append_icon(Point_Captured("yellow", "green"))
    a.owner = "yellow"

    a = m.map["2"]["base_yellow"]
    a.append_icon(Fireball_Damage("green", "green"))

    a = m.map["2"]["base_blue"]
    a.owner = "yellow"
    a.append_icon(Point_Captured("green", "green"))
    a.append_icon(Point_Captured("yellow", "green"))

    a = m.map["3"]["base_green"]
    a.append_icon(Fireball_Damage("yellow", "green"))
    a.append_icon(Alarm("green", "green"))
    a.append_icon(Fight("yellow", "green"))
    a.append_icon(Alarm("green", "green"))
    a.append_icon(Fight("yellow", "green"))

    a = m.map["3"]["base_o"]
    a.append_icon(Point_Captured("yellow", "green"))
    a.owner = "yellow"

    a = m.map["1"]["base_o"]
    a.owner = "yellow"


    m.update()
    with open('map1.png', 'rb') as photo:
        await message.reply_photo(photo=photo, reply_markup=keyboard)



@dp.message_handler(text=["–°–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", "–ß—É–∂–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"])
async def handle_action(message: Message, state: FSMContext):

    point_o1 = KeyboardButton('–¢–æ—á–∫–∞ –û')
    point_r = KeyboardButton('üü•–¢–æ—á–∫–∞ –ö')
    point_o2 = KeyboardButton('–¢–æ—á–∫–∞ –û')

    point_y = KeyboardButton('üü®–¢–æ—á–∫–∞ –ñ')
    point_c = KeyboardButton('–¢–æ—á–∫–∞ –¶')
    point_b = KeyboardButton('üü¶–¢–æ—á–∫–∞ –°')

    point_o3 = KeyboardButton('–¢–æ—á–∫–∞ –û')
    point_thet = KeyboardButton('üü©–¢–æ—á–∫–∞ –ó')
    point_o4 = KeyboardButton('–¢–æ—á–∫–∞ –û')

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True).row(point_o1, point_r, point_o2).row(point_y, point_c, point_b).row(point_o3, point_thet, point_o4)

    await message.reply('–í—ã–±–µ—Ä–µ—Ç–µ —Ç–æ—á–∫—É', reply_markup=keyboard)

@dp.message_handler(text=["–¢–æ—á–∫–∞ –û", "üü•–¢–æ—á–∫–∞ –ö", "üü®–¢–æ—á–∫–∞ –ñ", "–¢–æ—á–∫–∞ –¶", "üü¶–¢–æ—á–∫–∞ –°", "üü©–¢–æ—á–∫–∞ –ó"])
async def handle_point(message: Message, state: FSMContext):
    reply_markup = ReplyKeyboardMarkup(resize_keyboard=True)

    row = []
    for button in events_keyboard:
        button.text = button.text.replace("[$choosed_comand_name]", "red")
        button.text = button.text.replace("$[current_command]", "green")
        button.text = button.text.replace("$[tg_user_name]", message.from_user.first_name)

        print(button.text)
        row.append(button)
        if len(row) == 2:
            reply_markup.row(*row)
            row = []

    # Add any remaining buttons to the last row
    if row:
        reply_markup.row(*row)
    await message.reply('–î–µ–π—Å—Ç–≤–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–æ.\n–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–æ–º–º–∞–Ω–¥—É –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–ª–∞ —Å–æ–±—ã—Ç–∏–µ:', reply_markup=reply_markup)


@dp.message_handler(text=list(events_keyboard.keys()))


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
